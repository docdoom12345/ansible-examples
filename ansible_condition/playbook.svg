<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.44.0 (0)
 --><!-- Pages: 1 --><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1354pt" height="98pt" viewBox="0.00 0.00 1354.07 98.00" id="svg">
<script type="text/javascript" href="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js" id="jquery"/><script type="text/javascript" id="my_javascript"><![CDATA[/**
 * This file contains the functions responsible to highlight the plays, roles and tasks when rendering the SVG file in a browser
 * or any SVG reader that support Javascript.
 */

/**
 * The name of the CSS class for highlighted elements
 * @type {string}
 */
const HIGHLIGHT_CLASS = "highlight";

/**
 * The current selected element on the graph
 * @type {null}
 */
let currentSelectedElement = null;

/**
 * Highlight the linked nodes of the given root element
 * @param {Element} parentElement
 * @param {string[]} visitedElements
 */
function highlightLinkedNodes(parentElement, visitedElements = []) {
    $(parentElement).find('link').each(function (index, element) {
        const linkedElementId = $(element).attr('target');
        const edgeId = $(element).attr('edge');

        const currentElement = $(`#${linkedElementId}`);
        currentElement.addClass(HIGHLIGHT_CLASS);

        // Highlight the edge point to the target
        $(`#${edgeId}`).addClass(HIGHLIGHT_CLASS);

        if (!visitedElements.includes(linkedElementId)) {
            visitedElements.push(linkedElementId);
            // Recursively highlight
            highlightLinkedNodes(currentElement, visitedElements);
        }
    })
}


/**
 * Unhighlight the linked nodes of the given root element
 * @param {Element} parentElement
 * @param {string[]} visitedElements
 * @param {boolean} isHover True when we are coming from a mouseleave event. In that case, we should not unhighlight if
 * the parentElement is the current selected element
 */
function unHighlightLinkedNodes(parentElement, visitedElements = [], isHover) {
    const currentSelectedElementId = $(currentSelectedElement).attr('id');
    // Do not unhighlight the current selected element
    if ($(parentElement).attr('id') !== currentSelectedElementId || !isHover) {

        $(parentElement).find('link').each(function (index, element) {
            const linkedElementId = $(element).attr('target');
            const edgeId = $(element).attr('edge');

            const linkedElement = $(`#${linkedElementId}`);

            if (linkedElement.attr('id') !== currentSelectedElementId) {
                linkedElement.removeClass(HIGHLIGHT_CLASS);

                // Unhighlight the edge point to the target
                $(`#${edgeId}`).removeClass(HIGHLIGHT_CLASS);

                if (!visitedElements.includes(linkedElementId)) {
                    visitedElements.push(linkedElementId);
                    // Recursively unhighlight
                    unHighlightLinkedNodes(linkedElement, visitedElements, isHover);
                }
            }

        })
    }

}

/**
 * Hover handler for mouseenter event
 * @param {Event} event
 */
function hoverMouseEnter(event) {
    highlightLinkedNodes(event.currentTarget, []);
}

/**
 * Hover handler for mouseleave event
 * @param {Event} event
 */
function hoverMouseLeave(event) {
    unHighlightLinkedNodes(event.currentTarget, [], true);
}

/**
 * Handler when clicking on some elements
 * @param {Event} event
 */
function clickOnElement(event) {
    const newClickedElement = $(event.currentTarget);

    event.preventDefault(); // Disable the default click behavior since we override it here

    if (newClickedElement.attr('id') === $(currentSelectedElement).attr('id')) { // clicking again on the same element
        newClickedElement.removeClass(HIGHLIGHT_CLASS);
        unHighlightLinkedNodes(currentSelectedElement, [], false);
        currentSelectedElement = null;
    } else { // clicking on a different node

        // Remove highlight from all the nodes linked to the current selected node
        unHighlightLinkedNodes(currentSelectedElement, [], false);
        if (currentSelectedElement) {
            currentSelectedElement.removeClass(HIGHLIGHT_CLASS);
        }

        newClickedElement.addClass(HIGHLIGHT_CLASS);
        highlightLinkedNodes(newClickedElement, []);
        currentSelectedElement = newClickedElement;
    }
}

/**
 * Handler when double clicking on some elements
 * @param {Event} event
 */
function dblClickElement(event) {
    const newElementDlbClicked = event.currentTarget;
    const links = $(newElementDlbClicked).find("a[xlink\\:href]");

    if (links.length > 0) {
        document.location = $(links[0]).attr("xlink:href");
    } else {
        console.log("No links found on this element");
    }
}


$("#svg").ready(function () {
    let playbooks = $("g[id^=playbook_]");
    let plays = $("g[id^=play_]");
    let roles = $("g[id^=role_]");
    let blocks = $("g[id^=block_]");
    let tasks = $("g[id^=pre_task_], g[id^=task_], g[id^=post_task_]");

    playbooks.hover(hoverMouseEnter, hoverMouseLeave);
    playbooks.click(clickOnElement);
    playbooks.dblclick(dblClickElement);

    // Set hover and click events on the plays
    plays.hover(hoverMouseEnter, hoverMouseLeave);
    plays.click(clickOnElement);
    plays.dblclick(dblClickElement);

    // Set hover and click events on the roles
    roles.hover(hoverMouseEnter, hoverMouseLeave);
    roles.click(clickOnElement);
    roles.dblclick(dblClickElement);

    // Set hover and click events on the blocks
    blocks.hover(hoverMouseEnter, hoverMouseLeave);
    blocks.click(clickOnElement);
    blocks.dblclick(dblClickElement);

    // Set hover and click events on the tasks
    tasks.hover(hoverMouseEnter, hoverMouseLeave);
    tasks.click(clickOnElement);
    tasks.dblclick(dblClickElement);

});
]]></script><style type="text/css" id="my_css"><![CDATA[/**
 Hover on nodes, edges, path and polygon
 */
.node:hover, .edge:hover, path:hover, path + polygon:hover {
    cursor: pointer;
    stroke-width: 3;
    font-weight: bolder;
}

/**
 Manually added class by the script highlight-hover.js when hovering on plays and roles
 */
.highlight {
    cursor: pointer;
    stroke-width: 3;
    font-weight: bolder;
}
]]></style><g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 94)">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-94 1350.07,-94 1350.07,4 -4,4"/>
<!-- playbook_e12d72dd -->
<g id="playbook_e12d72dd" class="node">
<title>playbook_e12d72dd</title>
<g id="a_playbook_e12d72dd"><a xlink:href="/home/student/ansible_examples/ansible_condition/playbook.yaml" xlink:title="playbook.yaml">
<ellipse fill="none" stroke="black" stroke-dasharray="1,5" cx="76.69" cy="-45" rx="76.89" ry="18"/>
<text text-anchor="middle" x="76.69" y="-41.3" font-family="Times-Roman" font-size="14.00">playbook.yaml</text>
</a>
</g>
<links><link target="play_7d258d14" edge="edge_1_playbook_e12d72dd_play_7d258d14"/></links></g>
<!-- play_7d258d14 -->
<g id="play_7d258d14" class="node">
<title>play_7d258d14</title>
<g id="a_play_7d258d14"><a xlink:href="/home/student/ansible_examples/ansible_condition/playbook.yaml" xlink:title="node1,node2">
<polygon fill="#15b727" stroke="#15b727" points="673.39,-63 430.39,-63 430.39,-27 673.39,-27 673.39,-63"/>
<text text-anchor="middle" x="551.89" y="-41.3" font-family="Times-Roman" font-size="14.00" fill="#ffffff">Play: Demonstrate conditions (2)</text>
</a>
</g>
<links><link target="task_6610e398" edge="edge_1_play_7d258d14_task_6610e398"/><link target="task_0318b9cb" edge="edge_2_play_7d258d14_task_0318b9cb"/></links></g>
<!-- playbook_e12d72dd&#45;&gt;play_7d258d14 -->
<g id="edge_playbook_e12d72dd_play_7d258d14" class="edge">
<title>playbook_e12d72dd-&gt;play_7d258d14</title>
<g id="a_edge_playbook_e12d72dd_play_7d258d14"><a xlink:title="1 Play: Demonstrate conditions (2)">
<path fill="none" stroke="#15b727" d="M153.46,-45C225.16,-45 334.28,-45 420.06,-45" id="path_edge_playbook_e12d72dd_play_7d258d14"/>
<polygon fill="#15b727" stroke="#15b727" points="420.13,-48.5 430.13,-45 420.13,-41.5 420.13,-48.5"/>
</a>
</g>
<g id="a_edge_playbook_e12d72dd_play_7d258d14-label"><a xlink:title="1 Play: Demonstrate conditions (2)">
<text text-anchor="middle" font-family="Times-Roman" font-size="14.00" fill="#15b727" dy="-0.2%"><textPath xlink:href="#path_edge_playbook_e12d72dd_play_7d258d14" startOffset="168.616">1 Play: Demonstrate conditions (2)</textPath></text>
</a>
</g>
</g>
<!-- task_6610e398 -->
<g id="task_6610e398" class="node">
<title>task_6610e398</title>
<g id="a_task_6610e398"><a xlink:href="/home/student/ansible_examples/ansible_condition/playbook.yaml" xlink:title="Install web package">
<polygon fill="none" stroke="#15b727" points="1335.31,-64.54 1335.31,-79.46 1253.84,-90 1138.62,-90 1057.15,-79.46 1057.15,-64.54 1138.62,-54 1253.84,-54 1335.31,-64.54"/>
<text text-anchor="middle" x="1196.23" y="-68.3" font-family="Times-Roman" font-size="14.00">[task] Install web package</text>
</a>
</g>
</g>
<!-- play_7d258d14&#45;&gt;task_6610e398 -->
<g id="edge_1_play_7d258d14_task_6610e398" class="edge">
<title>play_7d258d14-&gt;task_6610e398</title>
<g id="a_edge_1_play_7d258d14_task_6610e398"><a xlink:title="1 ">
<path fill="none" stroke="#15b727" d="M673.71,-50.08C779.54,-54.53 933.7,-61.01 1046.97,-65.77" id="path_edge_1_play_7d258d14_task_6610e398"/>
<polygon fill="#15b727" stroke="#15b727" points="1046.97,-69.27 1057.11,-66.19 1047.27,-62.28 1046.97,-69.27"/>
</a>
</g>
<g id="a_edge_1_play_7d258d14_task_6610e398-label"><a xlink:title="1 ">
<text text-anchor="middle" font-family="Times-Roman" font-size="14.00" fill="#15b727" dy="-0.2%"><textPath xlink:href="#path_edge_1_play_7d258d14_task_6610e398" startOffset="281.92811072619935">1 </textPath></text>
</a>
</g>
</g>
<!-- task_0318b9cb -->
<g id="task_0318b9cb" class="node">
<title>task_0318b9cb</title>
<g id="a_task_0318b9cb"><a xlink:href="/home/student/ansible_examples/ansible_condition/playbook.yaml" xlink:title="Create a user account">
<polygon fill="none" stroke="#15b727" points="1345.92,-10.54 1345.92,-25.46 1258.23,-36 1134.23,-36 1046.54,-25.46 1046.54,-10.54 1134.23,0 1258.23,0 1345.92,-10.54"/>
<text text-anchor="middle" x="1196.23" y="-14.3" font-family="Times-Roman" font-size="14.00">[task] Create a user account</text>
</a>
</g>
</g>
<!-- play_7d258d14&#45;&gt;task_0318b9cb -->
<g id="edge_2_play_7d258d14_task_0318b9cb" class="edge">
<title>play_7d258d14-&gt;task_0318b9cb</title>
<g id="a_edge_2_play_7d258d14_task_0318b9cb"><a xlink:title="2 [when: ansible_facts['nodename'] == 'node1']">
<path fill="none" stroke="#15b727" d="M673.7,-32.25C679.68,-31.79 685.6,-31.37 691.39,-31 806.63,-23.7 936.95,-20.47 1036.18,-19.06" id="path_edge_2_play_7d258d14_task_0318b9cb"/>
<polygon fill="#15b727" stroke="#15b727" points="1036.34,-22.55 1046.29,-18.92 1036.24,-15.56 1036.34,-22.55"/>
</a>
</g>
<g id="a_edge_2_play_7d258d14_task_0318b9cb-label"><a xlink:title="2 [when: ansible_facts['nodename'] == 'node1']">
<text text-anchor="middle" font-family="Times-Roman" font-size="14.00" fill="#15b727" dy="-0.2%"><textPath xlink:href="#path_edge_2_play_7d258d14_task_0318b9cb" startOffset="229.70019070578724">2 [when: ansible_facts['nodename'] == 'node1']</textPath></text>
</a>
</g>
</g>
</g>
</svg>